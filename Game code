import sys
cells = list((str(" "))*9)
cell_row = [cells[i - 3:i] for i in range(3, 10, 3)]
count = 0

player = """
________________________________
|               |  __________   |
|   \      /    |  |        |   |
|    \    /     |  |        |   |
|     \  /      |  |        |   |
|      \/       |  |        |   |
|      /\       |  |        |   |
|     /  \      |  |        |   |
|    /    \     |  |        |   |
|   /      \    |  __________   |  
________________|________________
"""
choose = int(input("""Choose your player with wanna you play
Available player: %s
Enter the 0 for become X player or 1 for O.
Enter: """ % player))
print(choose)
print('---------\n|',*(cell_row[0]),'|')
print('|',*(cell_row[1]),'|')
print('|',*(cell_row[2]),'|\n---------')







def min_win():# eighth
    if (cell_row[0].count("X") + cell_row[1].count("X") + cell_row[2].count("X") + cell_row[0].count("O") + cell_row[1].count("O") + cell_row[2].count("O")) < 9:
        return new_coordinate()
    else:
        print("Draw")
        sys.exit()

def actualization():# seventh stage

    print('---------\n|',*(cell_row[0]),'|')
    print('|',*(cell_row[1]),'|')
    print('|',*(cell_row[2]),'|\n---------')


    for i in range(3):
        if cell_row[i].count("X") == 3 or (cell_row[0][i].count("X") + cell_row[1][i].count("X") + cell_row[2][i].count("X")) == 3 or (cell_row[0][0].count("X") + cell_row[1][1].count("X") + cell_row[2][2].count("X")) == 3 or (cell_row[0][2].count("X") + cell_row[1][1].count("X") + cell_row[2][0].count("X")) == 3:
            print("X wins")
            sys.exit(0)
        elif cell_row[i].count("O") == 3 or (cell_row[0][i].count("O") + cell_row[1][i].count("O") + cell_row[2][i].count("O")) == 3 or (cell_row[0][0].count("O") + cell_row[1][1].count("O") + cell_row[2][2].count("O")) == 3 or (cell_row[0][2].count("O") + cell_row[1][1].count("O") + cell_row[2][0].count("O")) == 3:
            print("O wins")
            sys.exit(0)
        else:
            return min_win()
    return cell_row, column


def number_implement():# sixth stage

    global count
    X_range = [0, 2, 4, 6, 8]
    if choose == 0:
        if count in X_range:
            cell_row[row - 1][column - 1] = ("X")
            count += 1
        else:
            cell_row[row - 1][column - 1] = ("O")
            count += 1
    else:
        if count in X_range:
            cell_row[row - 1][column - 1] = ("O")
            count += 1
        else:
            cell_row[row - 1][column - 1] = ("X")
            count += 1

    return actualization()

def check_available():# fifth stage
    if cell_row[row - 1][column - 1] == "X" or cell_row[row - 1][column - 1] == "O":
        print("This cell is occupied! Choose another one! if the cell is not empty.")
        return new_coordinate()
    else:
        return number_implement()



def max_number():# third stage
    row_list = [0, 1, 2]
    if int(new_coordinates[0]) > 3:
        print(("Coordinates should be from 1 to 3! if the user enters coordinates outside the game grid."))
        return new_coordinate()
    else:
        return check_available()


def check_digits(): # second stage
    global move
    global row
    global column
    for x in new_coordinates :
        if x.isdigit():
            move = [int(x) for x in new_coordinates]
            row, column = int(move[0]), int(move[1])
            return max_number(), move, row, column
        else:
            print("You should enter numbers! if the user enters non-numeric symbols in the coordinates input.")
            return new_coordinate()


def new_coordinate():# first stage
    global new_coordinates
    new_coordinates = input("Enter the coordinates:").split(" ")
    return check_digits()
new_coordinate()
